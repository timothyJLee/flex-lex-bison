
/*
   Timothy Lee
   10/02/14
    Flex Scanner
    - Create lexical scanner using flex that can recognize tokens including integers and floats
    - create test program to take place of yacc/bison
       - While loop to call yylex() and switch to determine which defined token recognized
          - returns different token based off of a variety of regex matched characters
       - Defined tokens and structure defining yylval in seperate header file
          - Attempts to use yylval to make future bison work more simple
       - And print: Token INTEGER, Value 123 (where 1 is TokenValue and 23 is yytextValue)
    - generate "lex.yy.c" file by using proper make commands from test.l
*/


%{
#include <stdio.h>
#include <math.h>

int yyerror(const char*);
%}

%error-verbose

%union{
double real;
int integer;
char* string;
}

%start line
%type <real> rexpr
%type <string> sexpr

%left PLUS MINUS
%left MULT DIV
%right POWER MOD
%nonassoc LPAREN RPARENT

%token <real> REAL 
%token <integer> INT
%token <string> STRING
%token <string> PLUS  
%token <string> MINUS  
%token <string> MULT  
%token <string> DIV  
%token <string> MOD  
%token <string> POWER  
%token <string> ASSIGN   
%token <string> LPAREN
%token <string> RPAREN   
%token <string> HORN  
%token <string> QUESTION  
%token ENDOFLINE  
%token UNREC  


%%
line: 
 |line HORN sexpr QUESTION ENDOFLINE   {   printf("=\t%s\n", $3);  }
    | line HORN rexpr QUESTION ENDOFLINE   {   printf("=\t%f\n", $3);  }
    | line rexpr ENDOFLINE {printf("Result -> %f\n", $2);  }
    | line sexpr ENDOFLINE {printf("Result -> %s\n", $2);  }
    | line ENDOFLINE   
;
rexpr: rexpr PLUS rexpr {  $$ = $1 + $3; }
    | rexpr MINUS rexpr { $$ = $1 - $3; }
    | rexpr MULT rexpr { $$ = $1 * $3; }
    | rexpr DIV rexpr { $$ = $1 / $3; }
    | rexpr MOD rexpr { $$ = fmod($1, $3); }
    | rexpr POWER rexpr { $$ = pow($1, $3); }
    |   LPAREN rexpr RPAREN   { $$ = ( $2 ); }
    |   MINUS rexpr %prec MINUS {$$ = -$2;}
    | REAL { $$ = $1; }
    | INT { $$ = (double)$1; } 
;
sexpr: STRING { $$ = $1; }
    | STRING PLUS STRING { printf("Result -> %s + %s\n", $1,$3); }
    | STRING MINUS STRING { printf("Result -> %s + %s\n", $1,$3); }
    | STRING MULT STRING { printf("Result -> %s + %s\n", $1,$3); }
    | STRING DIV STRING { printf("Result -> %s + %s\n", $1,$3); }
    | STRING MOD STRING { printf("Result -> %s + %s\n", $1,$3); }
    | STRING POWER STRING { printf("Result -> %s + %s\n", $1,$3); }    
;
    
%%


int yyerror(const char * str)
{
   fprintf(stderr, "%s\n", str);
}
